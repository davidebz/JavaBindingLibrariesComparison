/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.javabindlibcomparison.model;


public class XmlJsonUnmarshaller_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected XmlJsonUnmarshaller_Helper()
   {
      this.emptyObjectCheck.put("bz.davide.javabindlibcomparison.model.Invoice", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.javabindlibcomparison.model.Invoice>() {
         @Override public void check(bz.davide.javabindlibcomparison.model.Invoice  ret){
            // changeof
            if (ret.changeof != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Invoice.changeof");
            // customer
            if (ret.customer != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Invoice.customer");
            // number
            if (ret.number != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Invoice.number");
            // rows
            if (ret.rows != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Invoice.rows");
            // total
            if (ret.total != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Invoice.total");
         }
      });
      this.putInstanceFactory("bz.davide.javabindlibcomparison.model.Invoice", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.javabindlibcomparison.model.Invoice ret = new bz.davide.javabindlibcomparison.model.Invoice();
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.Invoice").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.javabindlibcomparison.model.Invoice", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // changeof
            if ((value = structure.property("changeof")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).changeof = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((bz.davide.javabindlibcomparison.model.Invoice)obj).changeof = (bz.davide.javabindlibcomparison.model.Invoice)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Invoice"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((bz.davide.javabindlibcomparison.model.Invoice)obj).changeof = (bz.davide.javabindlibcomparison.model.Invoice)o;
                  }
               }
            // customer
            if ((value = structure.property("customer")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).customer = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((bz.davide.javabindlibcomparison.model.Invoice)obj).customer = (bz.davide.javabindlibcomparison.model.Person)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Person"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((bz.davide.javabindlibcomparison.model.Invoice)obj).customer = (bz.davide.javabindlibcomparison.model.Person)o;
                  }
               }
            // number
            if ((value = structure.property("number")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).number = null;
               else
               {
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).number = value.string();
               }
            // rows
            if ((value = structure.property("rows")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).rows = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  bz.davide.javabindlibcomparison.model.InvoiceRow[] arrayList = new bz.davide.javabindlibcomparison.model.InvoiceRow[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (bz.davide.javabindlibcomparison.model.InvoiceRow)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("InvoiceRow"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (bz.davide.javabindlibcomparison.model.InvoiceRow)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).rows = arrayList;
               }
            // total
            if ((value = structure.property("total")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.javabindlibcomparison.model.Invoice)obj).total = (int)value.integer();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.javabindlibcomparison.model.Smartphone", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.javabindlibcomparison.model.Smartphone>() {
         @Override public void check(bz.davide.javabindlibcomparison.model.Smartphone  ret){
            // os
            if (ret.os != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Smartphone.os");
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.Product").check(ret);
         }
      });
      this.putInstanceFactory("bz.davide.javabindlibcomparison.model.Smartphone", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.javabindlibcomparison.model.Smartphone ret = new bz.davide.javabindlibcomparison.model.Smartphone();
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.Smartphone").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.javabindlibcomparison.model.Smartphone", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.javabindlibcomparison.model.Product", obj, identities);
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // os
            if ((value = structure.property("os")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Smartphone)obj).os = null;
               else
               {
                  ((bz.davide.javabindlibcomparison.model.Smartphone)obj).os = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.javabindlibcomparison.model.Person", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.javabindlibcomparison.model.Person>() {
         @Override public void check(bz.davide.javabindlibcomparison.model.Person  ret){
            // name
            if (ret.name != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Person.name");
         }
      });
      this.putInstanceFactory("bz.davide.javabindlibcomparison.model.Person", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.javabindlibcomparison.model.Person ret = new bz.davide.javabindlibcomparison.model.Person();
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.Person").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.javabindlibcomparison.model.Person", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // name
            if ((value = structure.property("name")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Person)obj).name = null;
               else
               {
                  ((bz.davide.javabindlibcomparison.model.Person)obj).name = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.javabindlibcomparison.model.InvoiceRow", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.javabindlibcomparison.model.InvoiceRow>() {
         @Override public void check(bz.davide.javabindlibcomparison.model.InvoiceRow  ret){
            // position
            if (ret.position != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.InvoiceRow.position");
            // product
            if (ret.product != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.InvoiceRow.product");
         }
      });
      this.putInstanceFactory("bz.davide.javabindlibcomparison.model.InvoiceRow", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.javabindlibcomparison.model.InvoiceRow ret = new bz.davide.javabindlibcomparison.model.InvoiceRow();
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.InvoiceRow").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.javabindlibcomparison.model.InvoiceRow", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // position
            if ((value = structure.property("position")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.javabindlibcomparison.model.InvoiceRow)obj).position = (int)value.integer();
               }
            // product
            if ((value = structure.property("product")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.InvoiceRow)obj).product = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((bz.davide.javabindlibcomparison.model.InvoiceRow)obj).product = (bz.davide.javabindlibcomparison.model.Product)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Product"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((bz.davide.javabindlibcomparison.model.InvoiceRow)obj).product = (bz.davide.javabindlibcomparison.model.Product)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.javabindlibcomparison.model.Product", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.javabindlibcomparison.model.Product>() {
         @Override public void check(bz.davide.javabindlibcomparison.model.Product  ret){
            // name
            if (ret.name != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.javabindlibcomparison.model.Product.name");
         }
      });
      this.putInstanceFactory("bz.davide.javabindlibcomparison.model.Product", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.javabindlibcomparison.model.Product ret = new bz.davide.javabindlibcomparison.model.Product();
            emptyObjectCheck.get("bz.davide.javabindlibcomparison.model.Product").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.javabindlibcomparison.model.Product", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // name
            if ((value = structure.property("name")) != null)
               if (value.isNull())
                  ((bz.davide.javabindlibcomparison.model.Product)obj).name = null;
               else
               {
                  ((bz.davide.javabindlibcomparison.model.Product)obj).name = value.string();
               }
            structure.close();
         }
      });

   }
}
